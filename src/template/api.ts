import type {
  AttributeNode,
  BaseElementNode,
  DirectiveNode,
  SourceLocation,
  TextNode,
} from '@vue/compiler-core'
import { NodeTypes } from '@vue/compiler-core'

import { debugTemplate } from '~/utils/debug'

/* -- SHARED UTILS -- */
const fakeSource = '_@_ generated from api, source is unavailable _@_'
let idCounter = 0
function genFakeLoc(): SourceLocation {
  idCounter += 1

  return {
    start: {
      column: 0,
      line: 0,
      offset: 0,
    },
    end: {
      column: 0,
      line: 0,
      offset: 0,
    },
    source: `${fakeSource} ${idCounter} _@_`,
  }
}

export function isGenerated(node: BaseElementNode): boolean {
  // Nodes without a SourceLocation don't come from the compiler.
  if (!node?.loc?.source) {
    return true
  }

  // Nodes with a fake SourceLocation are generated by this API.
  return node.loc.source.startsWith(fakeSource)
}

/* -- CREATE FUNCTIONS -- */
export function createDirective({
  name,
  arg,
  exp,
  modifiers = [],
}: Omit<Omit<DirectiveNode, 'loc'>, 'type'>): DirectiveNode {
  debugTemplate('api: Creating Directive', name)

  return {
    type: NodeTypes.DIRECTIVE,
    name,
    arg,
    exp,
    modifiers,
    loc: genFakeLoc(),
  }
}

export function createText({ content }: Omit<Omit<TextNode, 'loc'>, 'type'>): TextNode {
  debugTemplate('api: Creating Text', content)

  return {
    type: NodeTypes.TEXT,
    content,
    loc: genFakeLoc(),
  }
}

export function createAttribute({
  name,
  value,
}: {
  name: string
  value: string | undefined
}): AttributeNode {
  debugTemplate('api: Creating Attribute', name)

  return {
    type: NodeTypes.ATTRIBUTE,
    name,
    value: value ? createText({ content: value }) : undefined,
    loc: genFakeLoc(),
  }
}
